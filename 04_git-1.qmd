---
title: git para trabajar individualmente
---

## Objetivos de aprendizaje

* Identificar por qué el control de versiones, específicamente Git, es importante para el desarrollo de software y análisis de datos.
* Diferenciar métodos para trabajar con Git y R: integración con RStudio.
* Aplicar el proceso de modificación-add-commit como el flujo de trabajo de Git para el seguimiento de los cambios y ver el historial de commits de un repositorio.
* Publicar repositorios en GitHub y coordinar versiones remotas y locales.


## ¿Por qué git?

¿Tenés algo así en tu computadora?

```         
/home/pao/Documents/Clases/progrmacion
├── script.R
├── tp.Rmd
├── tp_corregido.Rmd
├── tp_corregido2.Rmd
├── tp_final.Rmd
├── tp_finalfinal.Rmd
├── este_es_el_final.Rmd
├── juro_que_esta_es_la_ultima_version_del_tp.Rmd
└── FINAL.Rmd
```

Probablemente todos lo tenemos, o tuvimos algo así en algún momento, porque necesitamos guardar nuestro trabajo pero seguir teniendo acceso a versiones anteriores. Existe una solución para esto. Los sistemas de control de versiones gestionan la evolución y los cambios de un conjunto de archivos que llamaremos **repositorio**. Si alguna vez revisaste el historial de un archivo de Google Docs, el control de versiones es similar pero de una forma muy controlada. Git es un sistema de control de versiones muy popular, pero hay otros.

Si trabajas de manera individual, git es genial para hacer un seguimiento de los cambios y recuperar versiones anteriores de tus archivos. También podés utilizar un **repositorio remoto** (que veremos más adelante) para tener una copia de seguridad y compartir tu trabajo.

Si trabajas en equipo, podés aprovechar todo lo anterior y utilizar también el control de versiones como herramienta para colaborar y organizar las distintas versiones de un mismo archivo presentes en las múltiples computadoras que vos y las otras personas usen.

## Pero, ¿qué entendemos por control de versiones?

Imaginemos que tenemos un repositorio funcionando ([más adelante](04-git-1/#crear-un-nuevo-repositorio) veremos cómo crear uno). Cuando creas un nuevo archivo como parte del repositorio (o *repo*), ese archivo inicialmente no es **trackeado** o **no está versionado**. Esto significa que git ignorará el archivo y cualquier cambio que hayas hecho hasta que lo *agregues* al repositorio (*add* en inglés) y empieces a registrar los cambios que hagas en el contenido. En ese momento el archivo está en el area **staging** (que podemos imagina como una sala de espera de git) y está listo para entrar en el repositorio. Para eso hay que *confirmar* o registrar (*commit* en inglés) esa versión del archivo en el repositorio. Este flujo de trabajo `modify --> add --> commit` se repetirá cada vez que quieras guardar una versión del archivo. 

::: tip

No recomendamos hacer un _commit_ cada vez que guardes el archivo o cambies una coma, y tampoco es buena idea hacer un _commit_ con mil millones de cambios. Con la práctica y dependiendo de cómo trabajes, encontrarás un punto medio cómodo.

:::

![La figura muestra el ciclo de cambios en un archivo: versionado o sin versional. Cuando es versionado y forma parte del repositorio, las acciones son add, commit, y modificar. Con la acción add, el archivo se "prepara"; con la acción de commit, el archivo se "guarda" en el repositorio. Este ciclo se repite cada vez que se modifica el archivo.](images/file_cycle2.png)

Mencionamos las acciones `add` y `commit` que son los nombres de dos comandos de git. Si tenes experiencia trabajando con la terminal podés utilizar git desde ahí, pero los mismos comandos pueden ejecutarse desde una GUI como [GitHub Desktop](https://desktop.github.com/) o [GitKraken](https://www.gitkraken.com/). Durante este curso utilizaremos RStudio.

## ¿Ya mencionamos "repositorio remoto"?

Antes revisamos el **flujo de trabajo local**, es decir el repositorio vive en tu computadora. Un repositorio es una carpeta con archivos y una sub-carpeta oculta llamada `.git`. Esta carpeta es la que guarda toda la información sobre el respoitorio y la historia o *versiones* de tus archivos. Con esto ya estas trabajando con control de versiones. Pero, también podrías conectar el **repositorio local** con un **repositorio remoto**. En este curso vamos a utilizar [GitHub](https://www.github.com) para alojar repositorios remotos, pero hay otras opciones que podrías explorar, como [GitLab](https://about.gitlab.com/).

Si usas un repositorio remoto, tendrás que agregar un paso más al flujo de trabajo local (`modify --> add --> commit`) para asegurarte que la copia del repositorio en tu computadora es la misma que la copia en GitHub y vise versa. 

Imaginemos que tenemos un repositorio local, hicimos cambios en un archivo y luego un _commit_ para guardar esa nueva versión. Ahora necesitamos enviar esos cambios al repositorio remoto (más adelante veremos cómo crear el repositorio remoto). Para ello **empujamos** (**push** en inglés) el nuevo _commit_ al repositorio remoto y con eso, los dos repositorios ahora están "actualizados", tienen la misma versión de los archivos.

Si luego, otra persona de tu equipo hace un cambio en un archivo en su repositorio local y lo sube al repositorio remoto. Ahora, tu repositorio local está "desactualizado" respecto del repositorio remoto. Necesitas descargar esos nuevos commits del repositorio remoto a tu computadora. Necesitas hacer **pull**.

![Modelo conceptual de un flujo de trabajo utilizando proyectos RStudio y git. Los archivos se añaden al área de preparación y luego se envían al repositorio local. Puedes enviar commits al repositorio remoto y bajar nuevos commits a tu computadora.](images/local_remote.png)

Herramientas como GitHub también incluyen funciones que te ayudan a colaborar y gestionar repositorios. Por ejemplo, puedes modificar archivos y hacer _commits_ con esos cambios utilizando la interfaz web.

## Configuración inicial

Antes de crear tu primer repositorio es importante revisar que git esté configurado correctamente en tu computadora y que tengas permisos para modificar cosas en GitHub. Si seguiste las instrucciones [instrucciones previas al curso](A_instalacion.html) deberías tener todo listo, pero podemos revisar el estado de situación con `usethis::git_sitrep()` para comprobarlo. 

```r
> usethis::git_sitrep()

── Git global (user) 
• Name: "Pao Corrales"
• Email: "micorreo@gmail.com"
• Global (user-level) gitignore file: ~/.gitignore
• Vaccinated: TRUE
• Default Git protocol: "https"
• Default initial branch name: "main"

── GitHub user 
• Default GitHub host: "https://github.com"
• Personal access token for "https://github.com": <discovered>
• GitHub user: "paocorrales"
• Token scopes: "gist", "repo", "user", and "workflow"
• Email(s): "micorreo@gmail.com (primary)", "paocorrales@users.noreply.github.com", and
  "otro correo@gmail.com"
ℹ No active usethis project.

```

Revisá que la información sea correcta y que `Personal access token for "https://github.com":` sea igual a `<discovered>`. Eso te garantizará que puedas trabajar con git y GitHub. 


## Creando un nuevo repositorio

Hay muchas formas de iniciar un nuevo repositorio, localmente en tu computadora utilizando la terminal, desde GitHub ¡o desde RStudio!. Aca te mostraremos cómo crear un repositorio local desde RStudio, que estará asociado a un projecto de RStudio y luego como contectarlo con un repositorio remoto en GitHub usando el paquete `usethis`. Este flujo de trabajo sirve tanto para trabajar en un proyecto de análisis de datos como en el desarrollo de software. Pero tené en cuenta que hay muchas otras formas de trabajar con git.

::: ejercicio
**1. Creá un repositorio local**

-   Abrí el proyecto de RStudio en el que estás trabajando y queres crear el nuevo repositorio. El nombre del proyecto debería aparecer arriba a la derecha de la venta. 
-   En la consola corré la siguiente línea de código:

```r
usethis::use_git()
```

Esta funcion va a crear el repositorio y generara un commit inicial de todos los archivos que estén presentes en el proyecto. Va a preguntarte si queres hacer esto. Contestale que si seleccionado la opción afirmativa. Luego va a preguntarte si queres reiniciar RStudio. Esto es necesario para que aparezca la pestaña de Git desde la cual podremos trabajar sobre el repositorio. Seleccioná la opción afirmativa, ojo que siempre cambia el orden!

```r
> usethis::use_git()
✔ Setting active project to "/ubicacion/de/tu/proyecto".
✔ Initialising Git repo.
✔ Adding ".Rproj.user", ".Rhistory", ".Rdata", ".httr-oauth", ".DS_Store", and ".quarto" to
  .gitignore.
ℹ There are 2 uncommitted files:
• .gitignore
• test.Rproj
! Is it ok to commit them?

1: Negative
2: Yup
3: Nope

Selection: 2
✔ Adding files.
✔ Making a commit with message "Initial commit".
A restart of RStudio is required to activate the Git pane.
Restart now?

1: Absolutely not
2: No
3: Yes

Selection: 3
```

Ya tenés tu repositorio local! 

Si estuvieras trabajando desde la terminal, `git init` crea un nuevo repositorio.

:::

::: ejercicio

**2. Ahora, crea el repositorio remoto en GitHub**

Nuevamente, hay varias maneras de hacer esto, acá vamos a usar otra función de usethis: `usethis::use_github()`:


```r
> usethis::use_github()
✔ Creating GitHub repository "paocorrales/proyecto".
✔ Setting remote "origin" to "https://github.com/paocorrales/proyecto.git".
✔ Pushing "main" branch to GitHub and setting "origin/main" as upstream branch.
✔ Opening URL <https://github.com/paocorrales/proyecto>.
```
Esta funcion hace lo siguiente:

* Crea un nuevo repositorio en GitHub con el nombre del proyecto.
* Configura ese nuevo repositorio como origen remoto para el repositorio local.
* Configura tu branch local por defecto para realizar el mismo seguimiento en el origen y realiza un push inicial.
* Abre el nuevo repositorio en tu navegador.

:::

La nueva carpeta en tu computadora será un repositorio git, vinculado a un repositorio remoto de GitHub y un proyecto de RStudio al mismo tiempo. Este flujo de trabajo también se asegura de que toda la configuración entre los repositorios local y remoto se realice correctamente.

También agrega un archivo llamado `.gitignore` que incluye una lista de archivos que no queremos sumar al repositorio (por ejemplo `.Rhistory`).

## Cambios locales

Es hora de poner en práctica algunas de las cosas de las que hemos estado hablando.

::: ejercicio
**Add, commit**

1.  Creá un nuevo archivo RMarkdown y guardalo.
2.  Agregalo al área de preparación con _add_ y luego hace un _commit_. ¡Vas a tener que pensar un mensaje descriptivo!
3.  Hace un cambio en el archivo, puede ser cualquier cosa. Guardalo.
4.  Repetí el paso 2.

![Panel Git con 3 archivos sin seguimiento.](images/add1.png)

![Panel Git con 3 archivos con seguimiento añadidos al área de preparación.](images/add2.png)

![Interfaz RStudio para ver las diferencias entre archivos, escribir el mensaje para el commit y enviarlo al repositorio remoto.](images/add3.png)
:::

Si todo salió bien, empezaste a rastrear archivos, hiciste cambios y commits para guardar esa versión en el repositorio local. Puede que veas un mensaje en la pestaña de git diciendo que el repositorio local "is ahead of 'origin/master` by 2 commits". No verás ningún cambio en GitHub hasta que hagas **push** y envíes esos commits al repositorio remoto. Podés hacer esto al final del día si preferis, pero si trabajas con otras personas puede ser una buena idea hacer push luego de cada commit.

::: ejercicio

**¡Push!**

1.  Ahora, hacé _push_ para enviar los commits al repositorio remoto utilizando el botón con la flecha verde apuntando hacia arriba. 

:::

## Cambios remotos

Volvamos a GitHub. Si actualizas la página, ahora verás los archivos que acabas sumar al repositorio o modificar. Hagamos click en "Commits" para ver la historia del repositorio. Desde esta página, podés explorar el repositorio en el "estado" en el que estaba con cada commit y ver las diferencias entre las distintas versiones.

Ahora, podemos intentar hacer cambios aquí.

::: ejercicio

**Crear un README**

1.  En la página principal, hacé click en el botón verde que dice "Add a README".
2.  Agregá algo en el archivo. Los README suelen estar escritos en Markdown y contienen información sobre el repositorio.
3.  Al final de la página añadí un mensaje y hacé click en "Confirm changes...".
4.  Volvé a la página principal para ver el README. 

:::

El nuevo archivo y los cambios que hagas en GitHub sólo estarán en el repositorio remoto hasta que hagas un **pull** en el repositorio local. Si realizas cambios en el repositorio local mientras no está actualizado, podés encontrarte con conflictos cuando intentes unir las 2 versiones, lo que suele generar dolores de cabeza. Esto ocurre cuando la versión de un archivo en el repositorio local no es compatible con su versión en el repositorio remoto. En esos casos, git no puede decidir qué versión es la correcta y tenés que hacerlo vos.

Para evitar este problema (lo más posible), tenes que hacer un pull antes de empezar a hacer cualquier otra cosa. La mayoría de las veces RStudio mostrará el mensaje "Already up to date", pero es bueno hacerlo un hábito.

::: ejercicio

**Pull desde GitHub**

1.  Volvé a RStudio.
2.  Revisá panel de Git.
3.  Hacé click en la flecha azul que dice "Pull".
4.  Revisá el archivo README en la pestaña Archivos. 
:::

## Anatomía de un repositorio de GitHub

-   *Archivos README.* Utilizá un `README.md` para explicar de que se trata es tu proyecto y cómo utilizarlo. `README.md` es el archivo que se muestra automáticamente cuando abrís un repositorio de GitHub.

-   *Licencia.* La licencia le indica a las personas cómo puede utilizar el contenido de tu repositorio. Generalmente, utilizamos licencias permisivas para que las personas pueda utilizar los materiales de cualquier manera. Algunos ejemplos son la Licencia MIT o Apache. Podés revisar algunos recursos extra:

    -   [Elejí una licencia para proyectos de código](https://choosealicense.com/).
    -   [Licencias de software en lenguaje sencillo](https://tldrlegal.com/): explica la jerga legal de las licencias en términos sencillos

-   *Guía para colaborar.* Un archivo llamado `CONTRIBUTING.md` que incluye las instrucciones que personas que quieren conlaborar en tu proyecto sepan lo que deben hacer si quieren ayudarte.

-   *Código de conducta.* Los buenos proyectos tienen códigos de conducta para garantizar un ambiente amigable donde las personas pueden colaborar. Github tiene atajos para agregar Código de Conducta facilmente.

-   *Issues.* Te permiten gestionar el proyecto, discutir problemas y mejoras con otras personas.

::: ejercicio

Para practicar git y de paso lo que estuvimos viendo sobre manipulación de datos vamos a usar _GitHub Classroom_. 

¿Cómo funciona? 

Preparamos repositorios con distintos ejercicios para que resuelvan. 
Cada persona tendrá su repositorio para trabajar de manera individual, aunque siempre pueden resolver los ejercicios en grupos (pequeños!, 2 o 3 personas)

En el campus encontrarás las instrucciones para acceder a tu repositorio. 

:::